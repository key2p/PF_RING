AC_INIT([pfring], 1.0)

AC_PROG_CC
AC_CONFIG_FILES(lib/Makefile)

AC_CHECK_HEADERS([linux/net_tstamp.h librdi.h])

MACHINE=`$CC -dumpmachine | cut -d '-' -f 1`
CFLAGS=""
SYS_LIBS=""

VER=`cat ../kernel/linux/pf_ring.h | grep RING_VERSION | head -1 | cut -d '"' -f 2`
MAJOR_VER=`cat ../kernel/linux/pf_ring.h | grep RING_VERSION | head -1 | cut -d '"' -f 2 | cut -d '.' -f 1`

LIBPCAP_VER=`ls -d libpcap-* | sort -r | head -n1 | cut -d"-" -f2`

AC_ARG_ENABLE([archopt], AS_HELP_STRING([--disable-archopt], [Disable march and mtune optimization flags]))
if test "x$enable_archopt" != "xno"; then
  dnl> Checking for supported libraries (corei7, corei7-avx, core-avx2)
  NATIVE=`$CC -c -Q -march=native --help=target| grep "march" | xargs | cut -d ' ' -f 2`

  if test "$NATIVE" = haswell; then
    NATIVE="core-avx2"
  fi

  if test -f "lib/libs/libpfring_zc_x86_64_$NATIVE.a"; then
    CFLAGS="-march=native -mtune=native $CFLAGS"
    LIBARCH="_$NATIVE"
  fi
fi

dnl> Debug - disabled by default
AC_ARG_ENABLE([debug], AS_HELP_STRING([--enable-debug], [Enable debug mode]))
if test "x$enable_debug" = xyes; then
  DEBUG=1
  CFLAGS="-g $CFLAGS"
else
  CFLAGS="-O2 $CFLAGS"
fi

dnl> Redis - disabled by default
AC_ARG_ENABLE([redis], AS_HELP_STRING([--enable-redis], [Enable Redis support in PF_RING]))
if test "x$enable_redis" = xyes; then
  AC_CHECK_LIB([hiredis], [redisCommand])
  if test "x$ac_cv_lib_hiredis_redisCommand" = xyes; then
    AS_IF([test "x$enable_redis" = "xyes"], [REDIS_LIB="-lhiredis"; HAVE_REDIS="-D HAVE_REDIS"; HAVE_DL_REDIS="-DHAVE_DL_REDIS"])
  fi
fi

dnl> Redis - enable at least dlopen support if header files are available
if test "x$REDIS_LIB" = "x"; then
  AC_CHECK_HEADERS(hiredis/hiredis.h, [HAVE_DL_REDIS="-DHAVE_DL_REDIS"])
fi

dnl> ZMQ - disabled by default
AC_ARG_ENABLE([zmq], AS_HELP_STRING([--enable-zmq], [Enable ZMQ support in PF_RING]))
if test "x$enable_zmq" = xyes; then 
  AC_CHECK_LIB([zmq], [zmq_msg_send])
  if test "x$ac_cv_lib_zmq_zmq_msg_send" = xyes; then
    AS_IF([test "x$enable_zmq" = "xyes"], [ZMQ_LIB="-lzmq"; HAVE_ZMQ="-D HAVE_ZMQ"])
  fi
fi

AC_CHECK_LIB( [rt], [clock_gettime],   [SYSLIBS="$SYSLIBS -lrt"])
AC_CHECK_LIB( [nl], [nl_handle_alloc], [SYSLIBS="$SYSLIBS -lnl"])
AC_CHECK_LIB( [dl], [dlopen, dlsym],   [SYSLIBS="$SYSLIBS -ldl"],
		   [AC_CHECK_LIB([c], [dlopen, dlsym], [SYSLIBS="$SYSLIBS -lc"],
		   [AC_MSG_ERROR([unable to find the dlopen(), dlsym() functions]) ]) ])

dnl> libnl-3.0
have_nl_3="no"
AC_CHECK_LIB(nl-3, nl_socket_alloc, [ have_nl_3="yes" ])
if test x$have_nl_3 = xyes ; then
  dnl> libnl-genl-3.0
  AC_CHECK_LIB(nl-genl-3, genl_connect, [SYSLIBS="$SYSLIBS -lnl-genl-3 -lnl-3"], [
    AC_MSG_ERROR([unable to find nl-genl-3 please install libnl-genl-3-dev])
  ])
fi

AR_X="ar x"

if [[ $MACHINE == "x86_64" ]] || [[ $MACHINE == "aarch64" ]]; then
  dnl> Check for a modern pthread library
  AC_CHECK_LIB(pthread, pthread_setaffinity_np, AC_DEFINE_UNQUOTED(HAVE_PTHREAD_SETAFFINITY_NP, 1, [libc has pthread_setaffinity_np]))

  if test "x$ac_cv_lib_pthread_pthread_setaffinity_np" = xyes; then

    AC_MSG_CHECKING([PF_RING ZC support])
    PF_RING_ZC_LIB="libs/libpfring_zc_${MACHINE}${LIBARCH}.a"    
    if test -f lib/$PF_RING_ZC_LIB; then
      HAVE_PF_RING_ZC="-D HAVE_PF_RING_ZC"
      PF_RING_ZC_OBJS=`ar t lib/${PF_RING_ZC_LIB} | grep -F .o | tr '\n' ' '`
      PF_RING_ZC_DEP="extract_pfring_zc_lib"
      PF_RING_ZC_H="pfring_zc.h"
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi

    if test -f "lib/$PF_RING_ZC_LIB"; then
      if test ! -z "$DEBUG" ; then
        AC_MSG_CHECKING([ZC debug library])
        PF_RING_ZC_LIB_DBG="libs/libpfring_zc_${MACHINE}_dbg.a" 
        if test -f "lib/${PF_RING_ZC_LIB_DBG}"; then
          PF_RING_ZC_LIB=${PF_RING_ZC_LIB_DBG}
          PF_RING_ZC_OBJS=`ar t lib/${PF_RING_ZC_LIB_DBG} | grep -F .o | tr '\n' ' '`
          AC_MSG_RESULT(yes)
        else
          AC_MSG_RESULT(no)
        fi
      fi
    fi

    dnl> FT - Default enabled
    AC_ARG_ENABLE([ft], AS_HELP_STRING([--disable-ft], [Disable FT support]))
    if test "x$enable_ft" != "xno"; then

      dnl> FT dlopen - Default enabled
      PF_RING_FT_LIB_EXT=""
      AC_ARG_ENABLE([ft_dl], AS_HELP_STRING([--disable-ft-dl], [Disable dlopen support in FT to link nDPI (requires --enable-ndpi)]))
      AS_IF([test "x$enable_ft_dl" != "xno"], [PF_RING_FT_LIB_EXT="_dl"])

      AC_MSG_CHECKING([PF_RING FT support])
      PF_RING_FT_LIB="libs/libpfring_ft_${MACHINE}${LIBARCH}${PF_RING_FT_LIB_EXT}.a"
      if test -f "lib/$PF_RING_FT_LIB"; then
        HAVE_PF_RING_FT="-D HAVE_PF_RING_FT"
        PF_RING_FT_OBJS=`ar t lib/${PF_RING_FT_LIB} | grep -F .o | tr '\n' ' '`
        PF_RING_FT_DEP="extract_pfring_ft_lib"
        PF_RING_FT_H="pfring_ft.h"
        AC_MSG_RESULT(yes)
      else
        AC_MSG_RESULT(no)
      fi

      if test -f "lib/$PF_RING_FT_LIB"; then
        if test ! -z "$DEBUG" ; then
          AC_MSG_CHECKING([FT debug library])
          PF_RING_FT_LIB_DBG="libs/libpfring_ft_${MACHINE}_dbg${PF_RING_FT_LIB_EXT}.a" 
          if test -f "lib/${PF_RING_FT_LIB_DBG}"; then
            PF_RING_FT_LIB=${PF_RING_FT_LIB_DBG}
            PF_RING_FT_OBJS=`ar t lib/${PF_RING_FT_LIB_DBG} | grep -F .o | tr '\n' ' '`
            AC_MSG_RESULT(yes)
          else
            AC_MSG_RESULT(no)
          fi
        fi
      fi

    fi

    AC_MSG_CHECKING([PF_RING NPCAP support])
    NPCAP_LIB="libs/libnpcap_${MACHINE}${LIBARCH}.a"
    if test -f lib/$NPCAP_LIB; then
      HAVE_NPCAP="-D HAVE_NPCAP"
      NPCAP_OBJS=`ar t lib/${NPCAP_LIB} | grep -F .o | tr '\n' ' '`
      NPCAP_DEP="extract_npcap_lib"
      NPCAP_H="npcap.h"
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi

    dnl> R/W locks are broken on some BSD releases
    if test "$IS_FREEBSD" != "1" && test "$cross_compiling" != "yes" ; then
      AC_MSG_CHECKING([if r/w locks are supported])
      AC_TRY_RUN([
      #include <pthread.h>
      int main()
      {
        pthread_rwlock_t t;
        return 0;
      }
      ]
      , [ AC_MSG_RESULT(yes) AC_DEFINE_UNQUOTED(HAVE_RW_LOCK, 1, [pthread has rw locks]) ], [AC_MSG_RESULT(no)]
      )
    fi

  dnl> end of pthread_setaffinity_np check
  fi

  dnl> Fiberblaze
  MOD_FIBERBLAZE_LIB="libs/libpfring_fiberblaze_$MACHINE$LIBARCH.a"
  if test -f "lib/$MOD_FIBERBLAZE_LIB"; then
    FIBERBLAZE_LIB="-lm -ldl" 
    HAVE_FIBERBLAZE="-D HAVE_FIBERBLAZE"
    FIBERBLAZE_OBJS=`ar t lib/$MOD_FIBERBLAZE_LIB | grep .o\$ | tr '\n' ' '`
    FIBERBLAZE_DEP="extract_fiberblaze_lib"
  fi

  dnl> Napatech
  MOD_NT_LIB="libs/libpfring_nt_$MACHINE$LIBARCH.a"
  if test -f "lib/$MOD_NT_LIB"; then
    HAVE_NT="-D HAVE_NT"
    NT_OBJS=`ar t lib/$MOD_NT_LIB | grep .o\$ | tr '\n' ' '`
    NT_DEP="extract_nt_lib"
    if test ! -z "$DEBUG" ; then
      AC_MSG_CHECKING([NT debug library])
      MOD_NT_LIB_DBG="libs/libpfring_nt_${MACHINE}_dbg.a" 
      if test -f "lib/${MOD_NT_LIB_DBG}"; then
        MOD_NT_LIB=${MOD_NT_LIB_DBG}
        NT_OBJS=`ar t lib/${MOD_NT_LIB_DBG} | grep -F .o | tr '\n' ' '`
        AC_MSG_RESULT(yes)
      else
        AC_MSG_RESULT(no)
      fi
    fi
  fi

dnl> end of x86_64 check
fi

dnl> Mellanox
AC_MSG_CHECKING([Mellanox support (x64 and aarch64)])
MOD_MLX_LIB="libs/libpfring_mlx_${MACHINE}${LIBARCH}.a"

if test -f "lib/${MOD_MLX_LIB}"; then
    HAVE_MLX="-D HAVE_MLX"
    MLX_OBJS=`ar t lib/${MOD_MLX_LIB} | grep -F .o | tr '\n' ' '`
    MLX_DEP="extract_mlx_lib"

    dnl> MLX_LIB="-lmlx5 -libverbs"
    MLX_LIB="" # Use dlopen

    AC_MSG_RESULT(yes)

    if test ! -z "$DEBUG" ; then
      AC_MSG_CHECKING([Mellanox debug library])
      MOD_MLX_LIB_DBG="libs/libpfring_mlx_${MACHINE}_dbg.a" 
      if test -f "lib/${MOD_MLX_LIB_DBG}"; then
        MOD_MLX_LIB=${MOD_MLX_LIB_DBG}
        MLX_OBJS=`ar t lib/${MOD_MLX_LIB_DBG} | grep -F .o | tr '\n' ' '`
        AC_MSG_RESULT(yes)
      else
        AC_MSG_RESULT(no)
      fi
    fi

else
   AC_MSG_RESULT(no)
fi


dnl> AF_XDP - Default enabled
AC_ARG_ENABLE([xdp], AS_HELP_STRING([--disable-xdp], [Disable XDP/AF_XDP support in PF_RING]))
if test "x$enable_xdp" != "xno"; then
  AC_MSG_CHECKING([PF_RING AF_XDP support])
  BUILD_KERNEL=`uname -r`
  if test -f /usr/local/include/bpf/xsk.h && test -f /usr/src/linux-headers-$BUILD_KERNEL/include/uapi/linux/if_xdp.h; then
    BUILD_KERNEL=`uname -r`
    AF_XDP_LIB="-lbpf -lelf"
    HAVE_AF_XDP="-D HAVE_AF_XDP"
    AF_XDP_OBJS="pfring_mod_af_xdp.o"
    AF_XDP_DEP="copy_if_xdp"
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi
fi

dnl> BPF - Default enabled
AC_ARG_ENABLE([bpf], AS_HELP_STRING([--disable-bpf], [Disable BPF support in PF_RING]))
AS_IF([test "x$enable_bpf" != "xno"], [HAVE_BPF="-D ENABLE_BPF"; BPF_INCLUDE="-I../libpcap-$LIBPCAP_VER"; BPF_LIB="-L../libpcap-$LIBPCAP_VER -lpcap"])

dnl> AC_MSG_CHECKING([nDPI support])

dnl> nDPI - disabled by default
AC_ARG_ENABLE([ndpi], AS_HELP_STRING([--enable-ndpi], [Enable nDPI linking at compile time]))
if test "x$enable_ndpi" = xyes; then
  AC_MSG_CHECKING([nDPI support - dynamic linking])
  ndpi_installed=`pkg-config --exists libndpi && echo yes`
  if test x$ndpi_installed = xyes ; then
    NDPI_LIB=`pkg-config --libs libndpi`
    NDPI_INC=`pkg-config --cflags libndpi | sed -e 's/\(-I[^ \t]*\)/\1\/libndpi/g'`
    HAVE_NDPI="-D HAVE_NDPI"
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
    AC_MSG_CHECKING([nDPI support - static linking])
    NDPI_HOME="$HOME/nDPI"
    if test -f "$NDPI_HOME/src/lib/libndpi.a"; then
      NDPI_LIB="$NDPI_HOME/src/lib/libndpi.a"
      NDPI_INC="-I$NDPI_HOME/src/include"
      HAVE_NDPI="-D HAVE_NDPI"
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
    fi
  fi

  AC_CHECK_LIB([maxminddb], [MMDB_lookup_sockaddr])
  AC_HAVE_HEADERS(maxminddb.h)
  if test ".${ac_cv_lib_maxminddb_MMDB_lookup_sockaddr}" = ".yes" &&
     test ".${ac_cv_header_maxminddb_h}" = ".yes"; then
     NDPI_LIB="$NDPI_LIB -lmaxminddb"
     AC_MSG_RESULT(Building with libmaxminddb (https://github.com/maxmind/libmaxminddb))
  else
     AC_MSG_RESULT(Building without libmaxminddb (https://github.com/maxmind/libmaxminddb))
  fi
fi

if test "x$ac_cv_header_linux_net_tstamp_h" = x""yes; then :
  HAVE_HW_TIMESTAMP="-D ENABLE_HW_TIMESTAMP"
fi

NBPF_EXTRA_TARGETS="nbpftest"

AC_SUBST(CC)
AC_SUBST(CFLAGS)

AC_SUBST(MAJOR_VER)
AC_SUBST(VER)

AC_SUBST(LIBPCAP_VER)

AC_SUBST(HAVE_PF_RING_ZC)
AC_SUBST(PF_RING_ZC_LIB)
AC_SUBST(PF_RING_ZC_OBJS)
AC_SUBST(PF_RING_ZC_DEP)
AC_SUBST(PF_RING_ZC_H)

AC_SUBST(HAVE_PF_RING_FT)
AC_SUBST(PF_RING_FT_LIB)
AC_SUBST(PF_RING_FT_OBJS)
AC_SUBST(PF_RING_FT_DEP)
AC_SUBST(PF_RING_FT_H)

AC_SUBST(HAVE_NPCAP)
AC_SUBST(NPCAP_LIB)
AC_SUBST(NPCAP_OBJS)
AC_SUBST(NPCAP_DEP)
AC_SUBST(NPCAP_H)

AC_SUBST(AF_XDP_LIB)
AC_SUBST(HAVE_AF_XDP)
AC_SUBST(AF_XDP_OBJS)
AC_SUBST(AF_XDP_DEP)

AC_SUBST(HAVE_FIBERBLAZE)
AC_SUBST(FIBERBLAZE_OBJS)
AC_SUBST(FIBERBLAZE_LIB)
AC_SUBST(FIBERBLAZE_DEP)
AC_SUBST(MOD_FIBERBLAZE_LIB)

AC_SUBST(HAVE_NT)
AC_SUBST(NT_OBJS)
AC_SUBST(NT_DEP)
AC_SUBST(MOD_NT_LIB)

AC_SUBST(HAVE_MLX)
AC_SUBST(MLX_OBJS)
AC_SUBST(MLX_DEP)
AC_SUBST(MOD_MLX_LIB)
AC_SUBST(MLX_LIB)

AC_SUBST(HAVE_BPF)
AC_SUBST(BPF_INCLUDE)

AC_SUBST(NDPI_LIB)
AC_SUBST(NDPI_INC)
AC_SUBST(HAVE_NDPI)

AC_SUBST(HAVE_REDIS)
AC_SUBST(REDIS_LIB)

AC_SUBST(HAVE_DL_REDIS)

AC_SUBST(HAVE_ZMQ)
AC_SUBST(ZMQ_LIB)
AC_SUBST(HAVE_HYPERSCAN)
AC_SUBST(SYSLIBS)
AC_SUBST(HAVE_HW_TIMESTAMP)
AC_SUBST(AR_X)

AC_SUBST(NBPF_EXTRA_TARGETS)

dnl> AC_CONFIG_FILES([lib/Makefile])
AC_CONFIG_FILES([lib/pfring_config])
AC_CONFIG_FILES([examples/Makefile])
AC_CONFIG_FILES([examples_zc/Makefile])
AC_CONFIG_FILES([examples_ft/Makefile])
AC_CONFIG_FILES([c++/Makefile])
AC_CONFIG_FILES([nbpf/Makefile])
AC_CONFIG_FILES([wireshark/extcap/Makefile])

AC_CONFIG_HEADERS(lib/config.h)
AC_OUTPUT

dnl> Make sure pfring_config is executable
chmod gou+x lib/pfring_config
